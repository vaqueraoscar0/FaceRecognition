{"ast":null,"code":"var _jsxFileName = \"/Users/oscarvaquera/WebstormProjects/FaceRecognition/src/App.js\";\nimport React, { Component } from \"react\";\nimport ImageLinkForm from './Component/ImageLinkForm/ImageLinkForm';\nimport Navigation from \"./Component/Navigation/Navigation\";\nimport Logo from \"./Component/Logo/Logo\";\nimport Rank from \"./Component/Rank/Rank\";\nimport Clarifai from 'clarifai';\nimport './App.css';\nimport Particles from \"react-particles-js\";\nimport FaceRecognition from \"./Component/FaceRecognition/FaceRecognition\";\nimport SignIn from \"./Component/SignIn/SignIn\";\nimport Register from \"./Component/Register/Register\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst app = new Clarifai.App({\n  apiKey: '0d63782af1044abf968675c7809a0285'\n});\nconst particleOptions = {\n  particles: {\n    number: {\n      value: 30,\n      density: {\n        enable: true,\n        value_area: 200\n      }\n    }\n  }\n};\nconst initialState = {\n  input: '',\n  imageURL: '',\n  box: {},\n  route: 'signin',\n  isSignedIn: false,\n  user: {\n    id: '',\n    password: '',\n    email: '',\n    name: '',\n    entries: 0,\n    joined: ''\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.loadUser = data => {\n      this.setState({\n        user: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          entries: data.entries,\n          joined: data.joined\n        }\n      });\n    };\n\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById('inputimage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n\n    this.displayFaceBox = box => {\n      this.setState({\n        box: box\n      });\n    };\n\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageURL: this.state.input\n      });\n      app.models.predict( // HEADS UP! Sometimes the Clarifai Models can be down or not working as they are constantly getting updated.\n      // A good way to check if the model you are using is up, is to check them on the clarifai website. For example,\n      // for the Face Detect Mode: https://www.clarifai.com/models/face-detection\n      // If that isn't working, then that means you will have to wait until their servers are back up. Another solution\n      // is to use a different version of their model that works like: `c0c0ac362b03416da06ab3fa36fb58e3`\n      // so you would change from:\n      // .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n      // to:\n      // .predict('c0c0ac362b03416da06ab3fa36fb58e3', this.state.input)\n      Clarifai.FACE_DETECT_MODEL, this.state.input).then(response => {\n        if (response) {\n          fetch('http://localhost:3000/image', {\n            method: 'put',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          }).then(response => response.json()).then(count => {\n            this.setState(Object.assign(this.state.user, {\n              entries: count\n            }));\n          }).catch(console.log);\n        }\n\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      }).catch(err => console.log(err));\n    };\n\n    this.onRouteChange = route => {\n      if (route === 'signout') {\n        this.setState(initialState);\n      } else if (route === 'home') {\n        this.setState({\n          isSignedIn: true\n        });\n      }\n\n      this.setState({\n        route: route\n      });\n    };\n\n    this.state = {\n      input: '',\n      imageURL: '',\n      box: {},\n      route: 'signin',\n      isSignedIn: false,\n      user: {\n        id: '',\n        password: '',\n        email: '',\n        name: '',\n        entries: 0,\n        joined: ''\n      }\n    };\n  }\n\n  render() {\n    const {\n      isSignedIn,\n      route,\n      imageURL,\n      box\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Particles, {\n        className: 'particles',\n        params: particleOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n        isSignedIn: isSignedIn,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }, this), route === 'home' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Rank, {\n          name: this.state.user.name,\n          entries: this.state.user.entries\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          onInputChange: this.onInputChange,\n          onButtonSubmit: this.onButtonSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n          box: box,\n          imageURL: imageURL\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 18\n      }, this) : route === 'signin' ? /*#__PURE__*/_jsxDEV(SignIn, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 22\n      }, this) : /*#__PURE__*/_jsxDEV(Register, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/oscarvaquera/WebstormProjects/FaceRecognition/src/App.js"],"names":["React","Component","ImageLinkForm","Navigation","Logo","Rank","Clarifai","Particles","FaceRecognition","SignIn","Register","app","App","apiKey","particleOptions","particles","number","value","density","enable","value_area","initialState","input","imageURL","box","route","isSignedIn","user","id","password","email","name","entries","joined","constructor","loadUser","data","setState","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","onInputChange","event","target","onButtonSubmit","state","models","predict","FACE_DETECT_MODEL","then","response","fetch","method","headers","body","JSON","stringify","json","count","Object","assign","catch","console","log","err","onRouteChange","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ImageLinkForm from './Component/ImageLinkForm/ImageLinkForm';\nimport Navigation from \"./Component/Navigation/Navigation\";\nimport Logo from \"./Component/Logo/Logo\";\nimport Rank from \"./Component/Rank/Rank\";\nimport Clarifai from 'clarifai';\nimport './App.css';\nimport Particles from \"react-particles-js\";\nimport FaceRecognition from \"./Component/FaceRecognition/FaceRecognition\";\nimport SignIn from \"./Component/SignIn/SignIn\";\nimport Register from \"./Component/Register/Register\";\n\nconst app = new Clarifai.App({\n    apiKey: '0d63782af1044abf968675c7809a0285'\n});\n\nconst particleOptions = {\n    particles: {\n        number:{\n            value: 30,\n            density:{\n                enable: true,\n                value_area: 200\n            }\n        }\n    }\n}\n\nconst initialState = {\n    input: '',\n        imageURL: '',\n    box: {},\n    route: 'signin',\n        isSignedIn: false,\n    user: {\n    id: '',\n        password: '',\n        email: '',\n        name: '',\n        entries: 0,\n        joined: ''\n    }\n\n}\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            input: '',\n            imageURL: '',\n            box: {},\n            route: 'signin',\n            isSignedIn: false,\n            user: {\n                id: '',\n                password: '',\n                email: '',\n                name: '',\n                entries: 0,\n                joined: ''\n            }\n        }\n    }\n\n    loadUser = (data) =>{\n        this.setState({user: {\n                id: data.id,\n                name: data.name,\n                email: data.email,\n                entries: data.entries,\n                joined: data.joined\n        }})\n    }\n\n    calculateFaceLocation = (data) =>{\n        const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box\n        const image = document.getElementById('inputimage');\n        const width = Number(image.width);\n        const height = Number(image.height);\n        return {\n            leftCol: clarifaiFace.left_col * width,\n            topRow: clarifaiFace.top_row * height,\n            rightCol: width - (clarifaiFace.right_col * width),\n            bottomRow: height - (clarifaiFace.bottom_row * height)\n        }\n    }\n\n    displayFaceBox = (box) =>{\n        this.setState({box: box});\n    }\n\n   onInputChange = (event) =>{\n        this.setState({input: event.target.value});\n    }\n\n    onButtonSubmit = () => {\n        this.setState({imageURL: this.state.input});\n        app.models\n            .predict(\n                // HEADS UP! Sometimes the Clarifai Models can be down or not working as they are constantly getting updated.\n                // A good way to check if the model you are using is up, is to check them on the clarifai website. For example,\n                // for the Face Detect Mode: https://www.clarifai.com/models/face-detection\n                // If that isn't working, then that means you will have to wait until their servers are back up. Another solution\n                // is to use a different version of their model that works like: `c0c0ac362b03416da06ab3fa36fb58e3`\n                // so you would change from:\n                // .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n                // to:\n                // .predict('c0c0ac362b03416da06ab3fa36fb58e3', this.state.input)\n                Clarifai.FACE_DETECT_MODEL,\n                this.state.input)\n            .then(response => {\n                if (response) {\n                    fetch('http://localhost:3000/image', {\n                        method: 'put',\n                        headers: {'Content-Type': 'application/json'},\n                        body: JSON.stringify({\n                            id: this.state.user.id\n                        })\n                    })\n                        .then(response => response.json())\n                        .then(count => {\n                            this.setState(Object.assign(this.state.user, { entries: count}))\n                        })\n                        .catch(console.log)\n\n                }\n                this.displayFaceBox(this.calculateFaceLocation(response))\n            })\n            .catch(err => console.log(err));\n    }\n\n    onRouteChange = (route) =>{\n        if(route === 'signout'){\n            this.setState(initialState)\n        }else if(route === 'home'){\n            this.setState({isSignedIn: true})\n        }\n\n        this.setState({route: route});\n    }\n\n\n  render() {\n      const { isSignedIn, route, imageURL, box} = this.state;\n\n    return (\n        <div className=\"App\">\n            <Particles className={'particles'}\n                params={particleOptions}\n            />\n            <Navigation isSignedIn={isSignedIn} onRouteChange={this.onRouteChange}/>\n            {   route === 'home'\n                ?<div>\n                    <Logo/>\n                    <Rank\n                        name={this.state.user.name}\n                        entries={this.state.user.entries}/>\n                    <ImageLinkForm\n                        onInputChange={this.onInputChange}\n                        onButtonSubmit={this.onButtonSubmit}/>\n                    <FaceRecognition box={box} imageURL={imageURL}/>\n                </div>\n                :(\n                    route === 'signin'\n                    ?<SignIn loadUser={this.loadUser} onRouteChange={this.onRouteChange}/>\n                    :<Register loadUser={this.loadUser} onRouteChange={this.onRouteChange}/>\n                )\n            }\n        </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}